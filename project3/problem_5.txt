The TrieNode class contains an initializer, an insert function and a suffixes function. In the worst case, the insert function will traverse all the children in a TrieNode so the time complexity is O(n). The suffixes() function also traverse all the children of a TrieNode so it will tame O(n) times. As for the Trie class, the insert and find function takes O(m*n) time complexity, where m is the number of characters in a word and n is the number of children in a TrieNode, since it will search all the children of all characters of a word. For a single TrieNode class, the space complexity would be O(n) since it needs a dict for every char of a word. As for a Trie class, the space complexity would be O(m*n) where m is the number of words n is the number of character in each word. 