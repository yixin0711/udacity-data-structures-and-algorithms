This algorithm implement an HTTPRouter like finding in a typical web server using the Trie data structure we learned previously. The structure is very similar to the previous Trie data structure. The main features of this object is insert() and find(), which both take O(n) times as they both traverse all the children of a TrieNode. And for the RouteTrie class, the insert and find function takes O(m*n) times where m is the number of sub-path in a http route (number of TrieNode in a route) and n is the number of children in each RouteTrieNode. 

The space complexity is O(n) for RouteTrieNode and O(m*n) for RouterTrie where n is number of sub-path in a http route and m is the number of route. 